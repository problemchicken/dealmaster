name: iOS CI

on:
  workflow_dispatch:
  pull_request:

jobs:
  build:
    env:
      SIMULATOR_NAME: iPhone 17 Pro
      DERIVED_DATA_PATH: ${{ runner.temp }}/DerivedData
    runs-on: macos-latest
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Select Xcode 26
        id: xcode26
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '26.0'
        continue-on-error: true

      - name: Fallback to latest stable Xcode
        if: steps.xcode26.outcome == 'failure'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Check Podfile
        id: podfile
        run: |
          if [ -f "ios/Podfile" ]; then
            echo "has_podfile=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_podfile=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Cache CocoaPods
        if: steps.podfile.outputs.has_podfile == 'true'
        uses: actions/cache@v4
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install CocoaPods
        if: steps.podfile.outputs.has_podfile == 'true'
        run: sudo gem install cocoapods

      - name: Install iOS Pods
        if: steps.podfile.outputs.has_podfile == 'true'
        run: |
          set -euo pipefail
          cd ios
          pod install || pod install --repo-update

      - name: Ensure iOS 26 simulator
        run: |
          set -euo pipefail
          RUNTIME=$(xcrun simctl list runtimes | awk '/iOS 26/ {gsub(/[()]/, "", $NF); print $NF; exit}')
          if [ -z "$RUNTIME" ]; then
            echo "::error::No iOS 26 runtime found on this runner."
            exit 1
          fi
          if ! xcrun simctl list devices available | grep -q "${SIMULATOR_NAME} ("; then
            echo "Creating simulator ${SIMULATOR_NAME} with runtime ${RUNTIME}"
            xcrun simctl create "${SIMULATOR_NAME}" com.apple.CoreSimulator.SimDeviceType.iPhone-17-Pro "$RUNTIME"
          else
            echo "Simulator ${SIMULATOR_NAME} already exists."
          fi

      - name: Build with xcodebuild
        id: xcodebuild
        run: |
          set -euo pipefail
          WORKSPACE_FLAG=""
          if [ -d "Dealmaster.xcworkspace" ]; then
            WORKSPACE_FLAG="-workspace Dealmaster.xcworkspace"
          elif [ -d "Dealmaster.xcodeproj" ]; then
            WORKSPACE_FLAG="-project Dealmaster.xcodeproj"
          else
            echo "::error::Neither Dealmaster.xcworkspace nor Dealmaster.xcodeproj found."
            exit 1
          fi
          mkdir -p "$DERIVED_DATA_PATH"
          xcodebuild \
            $WORKSPACE_FLAG \
            -scheme Dealmaster \
            -configuration Debug \
            -destination "platform=iOS Simulator,name=${SIMULATOR_NAME}" \
            -derivedDataPath "$DERIVED_DATA_PATH" \
            clean build | tee build.log
        shell: bash

      - name: Upload build artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-logs
          path: |
            build.log
            ${{ env.DERIVED_DATA_PATH }}
          if-no-files-found: ignore
